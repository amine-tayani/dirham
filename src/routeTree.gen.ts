/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as landingIndexImport } from './routes/(landing)/index'
import { Route as DashboardUpcomingsImport } from './routes/dashboard/upcomings'
import { Route as DashboardTransactionsImport } from './routes/dashboard/transactions'
import { Route as DashboardSpendingImport } from './routes/dashboard/spending'
import { Route as DashboardSettingsImport } from './routes/dashboard/settings'
import { Route as DashboardReportsImport } from './routes/dashboard/reports'
import { Route as DashboardNotificationsImport } from './routes/dashboard/notifications'
import { Route as DashboardAssistantImport } from './routes/dashboard/assistant'
import { Route as DashboardAccountsImport } from './routes/dashboard/accounts'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const landingIndexRoute = landingIndexImport.update({
  id: '/(landing)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUpcomingsRoute = DashboardUpcomingsImport.update({
  id: '/upcomings',
  path: '/upcomings',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardTransactionsRoute = DashboardTransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardSpendingRoute = DashboardSpendingImport.update({
  id: '/spending',
  path: '/spending',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardReportsRoute = DashboardReportsImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardNotificationsRoute = DashboardNotificationsImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardAssistantRoute = DashboardAssistantImport.update({
  id: '/assistant',
  path: '/assistant',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardAccountsRoute = DashboardAccountsImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof authRouteImport
    }
    '/dashboard/accounts': {
      id: '/dashboard/accounts'
      path: '/accounts'
      fullPath: '/dashboard/accounts'
      preLoaderRoute: typeof DashboardAccountsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/assistant': {
      id: '/dashboard/assistant'
      path: '/assistant'
      fullPath: '/dashboard/assistant'
      preLoaderRoute: typeof DashboardAssistantImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/notifications': {
      id: '/dashboard/notifications'
      path: '/notifications'
      fullPath: '/dashboard/notifications'
      preLoaderRoute: typeof DashboardNotificationsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/reports': {
      id: '/dashboard/reports'
      path: '/reports'
      fullPath: '/dashboard/reports'
      preLoaderRoute: typeof DashboardReportsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/spending': {
      id: '/dashboard/spending'
      path: '/spending'
      fullPath: '/dashboard/spending'
      preLoaderRoute: typeof DashboardSpendingImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/transactions': {
      id: '/dashboard/transactions'
      path: '/transactions'
      fullPath: '/dashboard/transactions'
      preLoaderRoute: typeof DashboardTransactionsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/upcomings': {
      id: '/dashboard/upcomings'
      path: '/upcomings'
      fullPath: '/dashboard/upcomings'
      preLoaderRoute: typeof DashboardUpcomingsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/(landing)/': {
      id: '/(landing)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardAccountsRoute: typeof DashboardAccountsRoute
  DashboardAssistantRoute: typeof DashboardAssistantRoute
  DashboardNotificationsRoute: typeof DashboardNotificationsRoute
  DashboardReportsRoute: typeof DashboardReportsRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardSpendingRoute: typeof DashboardSpendingRoute
  DashboardTransactionsRoute: typeof DashboardTransactionsRoute
  DashboardUpcomingsRoute: typeof DashboardUpcomingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardAccountsRoute: DashboardAccountsRoute,
  DashboardAssistantRoute: DashboardAssistantRoute,
  DashboardNotificationsRoute: DashboardNotificationsRoute,
  DashboardReportsRoute: DashboardReportsRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardSpendingRoute: DashboardSpendingRoute,
  DashboardTransactionsRoute: DashboardTransactionsRoute,
  DashboardUpcomingsRoute: DashboardUpcomingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof landingIndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/dashboard/accounts': typeof DashboardAccountsRoute
  '/dashboard/assistant': typeof DashboardAssistantRoute
  '/dashboard/notifications': typeof DashboardNotificationsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/spending': typeof DashboardSpendingRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
  '/dashboard/upcomings': typeof DashboardUpcomingsRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof landingIndexRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/dashboard/accounts': typeof DashboardAccountsRoute
  '/dashboard/assistant': typeof DashboardAssistantRoute
  '/dashboard/notifications': typeof DashboardNotificationsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/spending': typeof DashboardSpendingRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
  '/dashboard/upcomings': typeof DashboardUpcomingsRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/dashboard/accounts': typeof DashboardAccountsRoute
  '/dashboard/assistant': typeof DashboardAssistantRoute
  '/dashboard/notifications': typeof DashboardNotificationsRoute
  '/dashboard/reports': typeof DashboardReportsRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/spending': typeof DashboardSpendingRoute
  '/dashboard/transactions': typeof DashboardTransactionsRoute
  '/dashboard/upcomings': typeof DashboardUpcomingsRoute
  '/(landing)/': typeof landingIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/signup'
    | '/dashboard/accounts'
    | '/dashboard/assistant'
    | '/dashboard/notifications'
    | '/dashboard/reports'
    | '/dashboard/settings'
    | '/dashboard/spending'
    | '/dashboard/transactions'
    | '/dashboard/upcomings'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/dashboard/accounts'
    | '/dashboard/assistant'
    | '/dashboard/notifications'
    | '/dashboard/reports'
    | '/dashboard/settings'
    | '/dashboard/spending'
    | '/dashboard/transactions'
    | '/dashboard/upcomings'
    | '/dashboard'
  id:
    | '__root__'
    | '/(auth)'
    | '/dashboard'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/dashboard/accounts'
    | '/dashboard/assistant'
    | '/dashboard/notifications'
    | '/dashboard/reports'
    | '/dashboard/settings'
    | '/dashboard/spending'
    | '/dashboard/transactions'
    | '/dashboard/upcomings'
    | '/(landing)/'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  landingIndexRoute: typeof landingIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  landingIndexRoute: landingIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/dashboard",
        "/(landing)/"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login",
        "/(auth)/signup"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/accounts",
        "/dashboard/assistant",
        "/dashboard/notifications",
        "/dashboard/reports",
        "/dashboard/settings",
        "/dashboard/spending",
        "/dashboard/transactions",
        "/dashboard/upcomings",
        "/dashboard/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx",
      "parent": "/(auth)"
    },
    "/dashboard/accounts": {
      "filePath": "dashboard/accounts.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/assistant": {
      "filePath": "dashboard/assistant.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/notifications": {
      "filePath": "dashboard/notifications.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/reports": {
      "filePath": "dashboard/reports.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings": {
      "filePath": "dashboard/settings.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/spending": {
      "filePath": "dashboard/spending.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/transactions": {
      "filePath": "dashboard/transactions.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/upcomings": {
      "filePath": "dashboard/upcomings.tsx",
      "parent": "/dashboard"
    },
    "/(landing)/": {
      "filePath": "(landing)/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
